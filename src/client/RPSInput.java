/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

/**
 *
 * @author jibra
 */
public class RPSInput extends javax.swing.JFrame implements Event {
	private static final long serialVersionUID = -1121202275148798015L;
	List<Player> players;
	Player myPlayer;
	String playerUsername;// caching it so we don't lose it when room is wiped
	List<Player> gameplayers;
	private final static Logger log = Logger.getLogger(GamePanel.class.getName());

	/**
	 * Creates new form RPSInput
	 */
	public RPSInput() {
		initComponents();
		choice1.add("Rock");
		choice1.add("Paper");
		choice1.add("Scissors");

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		label1 = new java.awt.Label();
		button1 = new java.awt.Button();
		choice1 = new java.awt.Choice();
		jLabel1 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jList1 = new javax.swing.JList<>();

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 152, Short.MAX_VALUE));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 345, Short.MAX_VALUE));

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		label1.setAlignment(java.awt.Label.CENTER);
		label1.setText("Rock, Paper, Scissors...");

		button1.setLabel("Submit");
		button1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				button1ActionPerformed(evt);
			}
		});

		choice1.setName("choiceInput"); // NOI18N

		jLabel1.setText("Choice:");

		jList1.setModel(new javax.swing.AbstractListModel<String>() {
			ArrayList<String> strings = new ArrayList<String>();

			public int getSize() {
				return strings.size();
			}

			public String getElementAt(int i) {
				return strings.get(i);
			}

			public void addClient(String name) {
				User u = new User(name);
				jList1.add(u);
				pack();
			}
		});
		jScrollPane1.setViewportView(jList1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup()
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup().addGap(103, 103, 103).addComponent(button1,
								javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(layout.createSequentialGroup().addGap(18, 18, 18).addComponent(jLabel1)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, 197,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(layout.createSequentialGroup().addGap(91, 91, 91).addComponent(label1,
								javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE)))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
				.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(54, 54, 54)
						.addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 59,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel1))
						.addGap(32, 32, 32)
						.addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 39,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup().addContainerGap(65, Short.MAX_VALUE).addComponent(jScrollPane1,
								javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(147, 147, 147)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	public int getChoice() {
		int choice = 2;
		if (choice1.getSelectedItem().equals("Rock"))
			choice = -1;
		if (choice1.getSelectedItem().equals("Paper"))
			choice = 0;
		if (choice1.getSelectedItem().equals("Scissors"))
			choice = 1;
		return choice;
	}

	public void button1ActionPerformed(java.awt.event.ActionEvent evt) {
		System.out.println("/" + choice1.getSelectedItem());
		SocketClient.INSTANCE.sendChoice("/" + choice1.getSelectedItem());

//		System.out.println(choice1.getSelectedItem());
//		SocketClient.INSTANCE.sendChoice(choice1.getSelectedItem());

	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(RPSInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(RPSInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(RPSInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(RPSInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new RPSInput().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private java.awt.Button button1;
	private java.awt.Choice choice1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JList<String> jList1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private java.awt.Label label1;

	// End of variables declaration//GEN-END:variables
	@Override
	public synchronized void onClientConnect(String clientName, String message) {
//		// TODO Auto-generated method stub
//		System.out.println("Connected on Game Panel: " + clientName);
//		boolean exists = false;
//		Iterator<Player> iter = players.iterator();
//		while (iter.hasNext()) {
//			Player p = iter.next();
//			if (p != null && p.getName().equalsIgnoreCase(clientName)) {
//				exists = true;
//				break;
//			}
//		}
//		if (!exists) {
//			Player p = new Player();
//			p.setName(clientName);
//			players.add(p);
//			if (clientName.equals(playerUsername)) {
//				System.out.println("Reset myPlayer");
//				myPlayer = p;
//			}
//		}
	}

	public void setPlayerName(String name) {
		playerUsername = name;
		if (myPlayer != null) {
			myPlayer.setName(playerUsername);
		}
	}

	@Override
	public void onClientDisconnect(String clientName, String message) {

//		// TODO Auto-generated method stub
//		System.out.println("Disconnected on Game Panel: " + clientName);
//		Iterator<Player> iter = players.iterator();
//		while (iter.hasNext()) {
//			Player p = iter.next();
//			if (p != null && !p.getName().equals(playerUsername) && p.getName().equalsIgnoreCase(clientName)) {
//				iter.remove();
//				break;
//			}
//		}
	}

	@Override
	public void onMessageReceive(String clientName, String message) {
		// TODO Auto-generated method stub
		System.out.println("Message on Game Panel");

	}

	@Override
	public void onChangeRoom() {
//		// don't clear, since we're using iterators to loop, remove via iterator
//		// players.clear();
//		Iterator<Player> iter = players.iterator();
//		while (iter.hasNext()) {
//			Player p = iter.next();
//			// if (p != myPlayer) {
//			iter.remove();
//			// }
//		}
//		myPlayer = null;
//		System.out.println("Cleared players");
	}

	public void awake() {
		players = new ArrayList<Player>();
	}

	@Override
	public void onChoiceReceive(String clientName, String choice) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onSyncDirection(String clientName, Point direction) {
//		Iterator<Player> iter = players.iterator();
//		while (iter.hasNext()) {
//			Player p = iter.next();
//			if (p != null && p.getName().equalsIgnoreCase(clientName)) {
//				System.out.println("Syncing direction: " + clientName);
//				p.setDirection(direction.x, direction.y);
//				System.out.println("From: " + direction);
//				System.out.println("To: " + p.getDirection());
//				break;
//			}
//		}
	}

	@Override
	public void onSyncPosition(String clientName, Point position) {
//		System.out.println("Got position for " + clientName);
//		Iterator<Player> iter = players.iterator();
//		while (iter.hasNext()) {
//			Player p = iter.next();
//			if (p != null && p.getName().equalsIgnoreCase(clientName)) {
//				System.out.println(clientName + " set " + position);
//				p.setPosition(position);
//				break;
//			}
//		}
	}

	@Override
	public void onGetRoom(String roomName) {
		// TODO Auto-generated method stub

	}
}
